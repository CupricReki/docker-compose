{"version":3,"sources":["TokenForm.tsx","CustomConfigUi.tsx","index.tsx"],"names":["homebridge","window","TokenForm","onRefreshToken","useState","loading","setLoading","loginInfo","setLoginInfo","useEffect","showSpinner","hideSpinner","form","createForm","schema","type","properties","code","title","required","description","codePrompt","onSubmit","a","request","email","password","refreshToken","console","error","toast","message","onCancel","undefined","Promise","r","setTimeout","response","className","getConfigs","getPluginConfig","CustomConfigUi","showTokenForm","setShowTokenForm","config","otherConfigs","updatePluginConfig","success","hideSchemaForm","showSchemaForm","then","configs","needToken","catch","e","onClick","addEventListener","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.adeecae1.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport '@homebridge/plugin-ui-utils/dist/ui.interface'\n\nconst { homebridge } = window\n\nexport default function TokenForm({\n  onRefreshToken,\n}: {\n  onRefreshToken(token: string): any\n}) {\n  const [loading, setLoading] = useState(false),\n    [loginInfo, setLoginInfo] = useState<\n      { email: string; password: string; codePrompt: string } | undefined\n    >()\n\n  useEffect(() => {\n    if (loading) {\n      homebridge.showSpinner()\n    } else {\n      homebridge.hideSpinner()\n    }\n  }, [loading])\n\n  useEffect(() => {\n    if (loginInfo) {\n      const form = homebridge.createForm(\n        {\n          schema: {\n            type: 'object',\n            properties: {\n              code: {\n                title: 'Code',\n                type: 'string',\n                required: true,\n                description: loginInfo.codePrompt,\n              },\n            },\n          },\n        },\n        {},\n        'Link Account',\n        'Change Email'\n      )\n\n      form.onSubmit(async ({ code }) => {\n        setLoading(true)\n\n        try {\n          const { refreshToken } = await homebridge.request('/token', {\n            email: loginInfo.email,\n            password: loginInfo.password,\n            code,\n          })\n\n          onRefreshToken(refreshToken)\n        } catch (e: any) {\n          // eslint-disable-next-line no-console\n          console.error(e)\n          homebridge.toast.error(e.message, 'Failed to Link Account')\n        } finally {\n          setLoading(false)\n        }\n      })\n\n      form.onCancel(() => setLoginInfo(undefined))\n    } else {\n      const form = homebridge.createForm(\n        {\n          schema: {\n            type: 'object',\n            properties: {\n              email: {\n                title: 'Email',\n                type: 'string',\n                'x-schema-form': {\n                  type: 'email',\n                },\n                required: true,\n              },\n              password: {\n                title: 'Password',\n                type: 'string',\n                'x-schema-form': {\n                  type: 'password',\n                },\n                required: true,\n              },\n            },\n          },\n        },\n        {},\n        'Log In'\n      )\n\n      form.onSubmit(async ({ email, password }) => {\n        setLoading(true)\n        await new Promise((r) => setTimeout(r, 1000))\n\n        try {\n          const response = (await homebridge.request('/send-code', {\n            email,\n            password,\n          })) as { codePrompt: string } | { refreshToken: string }\n\n          if ('refreshToken' in response) {\n            // didn't need 2fa, return token without asking for code\n            onRefreshToken(response.refreshToken)\n          } else {\n            setLoginInfo({\n              email,\n              password,\n              codePrompt: response.codePrompt,\n            })\n          }\n        } catch (e: any) {\n          // eslint-disable-next-line no-console\n          console.error(e)\n          homebridge.toast.error(e.message, 'Ring Login Failed')\n        } finally {\n          setLoading(false)\n        }\n      })\n    }\n  }, [onRefreshToken, loginInfo])\n\n  return <h4 className=\"text-center primary-text mb-3\">Link Ring Account</h4>\n}\n","import { useEffect, useState } from 'react'\nimport '@homebridge/plugin-ui-utils/dist/ui.interface'\nimport TokenForm from './TokenForm'\nconst { homebridge } = window\n\nfunction getConfigs() {\n  return homebridge.getPluginConfig()\n}\n\nexport default function CustomConfigUi() {\n  const [showTokenForm, setShowTokenForm] = useState(false)\n\n  useEffect(() => {\n    if (showTokenForm) {\n      homebridge.hideSchemaForm()\n    } else {\n      homebridge.showSchemaForm()\n    }\n  }, [showTokenForm])\n\n  useEffect(() => {\n    getConfigs()\n      .then((configs) => {\n        const needToken = !configs[0]?.refreshToken\n        setShowTokenForm(needToken)\n      })\n      // eslint-disable-next-line no-console\n      .catch((e) => console.error(e))\n  }, [])\n\n  async function onRefreshToken(refreshToken: string) {\n    const [config, ...otherConfigs] = await getConfigs()\n    await homebridge.updatePluginConfig([\n      { ...config, refreshToken },\n      ...otherConfigs,\n    ])\n    homebridge.toast.success('Refresh Token Updated', 'Ring Login Successful')\n    setShowTokenForm(false)\n  }\n\n  return showTokenForm ? (\n    <TokenForm onRefreshToken={onRefreshToken}></TokenForm>\n  ) : (\n    <button\n      className=\"btn btn-link m-0 p-0\"\n      onClick={() => setShowTokenForm(true)}\n    >\n      <i className=\"fa fa-redo mr-2\"></i>\n      Generate New Refresh Token\n    </button>\n  )\n}\n","import ReactDOM from 'react-dom'\nimport CustomConfigUi from './CustomConfigUi'\nimport '@homebridge/plugin-ui-utils/dist/ui.interface'\n\nwindow.homebridge.addEventListener('ready', () => {\n  ReactDOM.render(<CustomConfigUi />, document.getElementById('root'))\n})\n"],"sourceRoot":""}