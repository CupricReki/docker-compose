"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiLevelSwitch = void 0;
const base_device_accessory_1 = require("./base-device-accessory");
const hap_1 = require("./hap");
class MultiLevelSwitch extends base_device_accessory_1.BaseDeviceAccessory {
    constructor(device, accessory, logger, config) {
        super();
        this.device = device;
        this.accessory = accessory;
        this.logger = logger;
        this.config = config;
        const { Characteristic, Service } = hap_1.hap, { data: initialData } = this.device;
        this.registerCharacteristic({
            characteristicType: Characteristic.On,
            serviceType: Service.Lightbulb,
            getValue: (data) => Boolean(data.on),
            setValue: (value) => this.setOnState(value),
        });
        if (initialData.level !== undefined) {
            this.registerLevelCharacteristic({
                characteristicType: Characteristic.Brightness,
                serviceType: Service.Lightbulb,
                getValue: (data) => {
                    return data.level && !isNaN(data.level) ? 100 * data.level : 0;
                },
                setValue: (value) => this.setLevelState(value),
            });
        }
        // SOMEDAY: Hue/Sat/Color Temp
    }
    setOnState(on) {
        this.logger.info(`Turning ${this.device.name} ${on ? 'On' : 'Off'}`);
        return this.device.setInfo({ device: { v1: { on } } });
    }
    setLevelState(level) {
        this.logger.info(`Setting brightness of ${this.device.name} to ${level}%`);
        return this.device.setInfo({
            device: { v1: { level: level / 100 } },
        });
    }
}
exports.MultiLevelSwitch = MultiLevelSwitch;
